  // Get framework badge color
  const getFrameworkColor = (framework) => {
    switch (framework) {
      case 'UBOS.ai':
        return darkMode ? 'bg-green-800 text-green-200' : 'bg-green-100 text-green-800';
      case 'Langflow':
        return darkMode ? 'bg-purple-800 text-purple-200' : 'bg-purple-100 text-purple-800';
      case 'Crew.ai':
        return darkMode ? 'bg-orange-800 text-orange-200' : 'bg-orange-100 text-orange-800';
      default:
        return darkMode ? 'bg-gray-800 text-gray-200' : 'bg-gray-100 text-gray-800';
    }
  };

  // Get type badge color
  const getTypeColor = (type) => {
    switch (type) {
      case 'support':
        return darkMode ? 'bg-blue-800 text-blue-200' : 'bg-blue-100 text-blue-800';
      case 'sales':
        return darkMode ? 'bg-green-800 text-green-200' : 'bg-green-100 text-green-800';
      case 'content':
      case 'marketing':
        return darkMode ? 'bg-purple-800 text-purple-200' : 'bg-purple-100 text-purple-800';
      case 'research':
        return darkMode ? 'bg-yellow-800 text-yellow-200' : 'bg-yellow-100 text-yellow-800';
      case 'hr':
        return darkMode ? 'bg-pink-800 text-pink-200' : 'bg-pink-100 text-pink-800';
      case 'legal':
        return darkMode ? 'bg-red-800 text-red-200' : 'bg-red-100 text-red-800';
      case 'finance':
        return darkMode ? 'bg-emerald-800 text-emerald-200' : 'bg-emerald-100 text-emerald-800';
      case 'operations':
        return darkMode ? 'bg-cyan-800 text-cyan-200' : 'bg-cyan-100 text-cyan-800';
      default:
        return darkMode ? 'bg-gray-800 text-gray-200' : 'bg-gray-100 text-gray-800';
    }
  };

  const renderAgentCard = (agent, index, isDraggable = true, isLeaderCard = false) => {
    const isLeader = agent.isTeamLeader || (agent === companyData && agent.isTeamLeader);
    const content = (
      <div className={`${darkMode ? 'bg-neutral-700 border-neutral-600' : 'bg-white border-gray-200'} 
        ${isLeader ? 'border-2 border-blue-500' : 'border'} 
        rounded-xl shadow-sm overflow-hidden group transition-all duration-200
        ${isDraggable ? 'hover:shadow-md cursor-grab active:cursor-grabbing' : ''}`}
      >
        <div className="p-4">
          <div className="flex items-center justify-between mb-3">
            <div className="flex items-center gap-3">
              <div className="text-3xl">{agent.avatar || 'ðŸ¤–'}</div>
              <div>
                <div className="flex items-center gap-2">
                  <h3 className={`font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                    {agent.name}
                  </h3>
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                    isLeader
                      ? (darkMode ? 'bg-blue-900 text-blue-200' : 'bg-blue-100 text-blue-800')
                      : (darkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-800')
                  }`}>
                    {isLeader ? 'Team Leader' : 'Team Member'}
                  </span>
                </div>
                <div className="flex flex-wrap gap-2 mt-1">
                  {agent.type && (
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getTypeColor(agent.type)}`}>
                      {agent.type.charAt(0).toUpperCase() + agent.type.slice(1)}
                    </span>
                  )}
                  {agent.framework && (
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getFrameworkColor(agent.framework)}`}>
                      {agent.framework}
                    </span>
                  )}
                </div>
              </div>
            </div>
            {!isLeader && (
              <div className="flex gap-2">
                <button
                  onClick={() => handleChangeLeader(agent)}
                  className={`p-2 rounded-lg transition-colors ${
                    darkMode 
                      ? 'bg-neutral-600 hover:bg-blue-900/50 text-gray-300 hover:text-blue-300' 
                      : 'bg-gray-100 hover:bg-blue-100 text-gray-600 hover:text-blue-600'
                  }`}
                  title="Make team leader"
                >
                  <svg className="size-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <path d="M12 2l2.4 7.4H22l-6.2 4.5 2.4 7.4-6.2-4.5-6.2 4.5 2.4-7.4L2 9.4h7.6L12 2z"/>
                  </svg>
                </button>
                <button
                  onClick={() => handleRemoveTeamMember(agent.id)}
                  className={`p-2 rounded-lg transition-colors ${
                    darkMode 
                      ? 'bg-neutral-600 hover:bg-red-900/50 text-gray-300 hover:text-red-300' 
                      : 'bg-gray-100 hover:bg-red-100 text-gray-600 hover:text-red-600'
                  }`}
                  title="Remove team member"
                >
                  <svg className="size-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <path d="M3 6h18"></path>
                    <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path>
                    <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path>
                  </svg>
                </button>
              </div>
            )}
          </div>
          <p className={`text-sm mb-4 line-clamp-2 ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
            {agent.description}
          </p>
          {agent.addedAt && (
            <div className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
              Added {new Date(agent.addedAt).toLocaleDateString()}
            </div>
          )}
        </div>
      </div>
    );

    return isDraggable ? (
      <Draggable draggableId={agent.id || 'default'} index={index}>
        {(provided, snapshot) => (
          <div
            ref={provided.innerRef}
            {...provided.draggableProps}
            {...provided.dragHandleProps}
            className={`${snapshot.isDragging ? 'z-50' : ''}`}
          >
            {content}
          </div>
        )}
      </Draggable>
    ) : content;
  };

  return (
    <div className="space-y-6">
      <div className={`p-6 rounded-xl ${darkMode ? 'bg-neutral-800' : 'bg-white'} shadow-sm`}>
        <div className="flex justify-between items-center mb-4">
          <h2 className={`text-xl font-semibold ${darkMode ? 'text-white' : 'text-gray-800'}`}>
            Team Members
          </h2>
          <button
            onClick={() => setShowAddMemberModal(true)}
            className={`py-2 px-4 rounded-lg ${darkMode ? 'bg-blue-600 hover:bg-blue-700' : 'bg-blue-500 hover:bg-blue-600'} text-white transition-colors text-sm`}
          >
            <span className="flex items-center gap-x-2">
              <svg className="size-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <line x1="12" y1="5" x2="12" y2="19"></line>
                <line x1="5" y1="12" x2="19" y2="12"></line>
              </svg>
              Add Team Member
            </span>
          </button>
        </div>

        {/* Team Information Section - Moved to top */}
        {companyData.teamMembers && companyData.teamMembers.length > 0 ? (
          <div className="mb-6">
            <div className={`p-4 rounded-lg ${darkMode ? 'bg-neutral-700' : 'bg-gray-100'}`}>
              <h3 className={`text-sm font-medium mb-2 ${darkMode ? 'text-gray-200' : 'text-gray-700'}`}>
                Team Information
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <div className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Team Size</div>
                  <div className={`text-lg font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                    {companyData.teamMembers.length} Agents
                  </div>
                </div>
                <div>
                  <div className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Current Leader</div>
                  <div className={`text-lg font-medium ${darkMode ? 'text-white' : 'text-gray-900'}`}>
                    {getCurrentLeader().name}
                  </div>
                </div>
                <div>
                  <div className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>Frameworks</div>
                  <div className="flex flex-wrap gap-1 mt-1">
                    {Array.from(new Set([...companyData.teamMembers.map(member => member.framework)])).map(framework => (
                      <span key={framework} className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${getFrameworkColor(framework)}`}>
                        {framework}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        ) : null}
